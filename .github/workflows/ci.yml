name: ci
on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened]
    branches:
      - master
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
jobs:
  static-code-analysis:
    name: Run static code analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Python 3.9
      uses: actions/setup-python@master
      with:
        python-version: 3.9

    - name: Run static code analysis
      run: |
        python -m pip install --upgrade pip
        pip install tox
        tox -e codechecks

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
    - uses: actions/checkout@v3

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}

    - name: Run unit tests
      run: |
        python -m pip install --upgrade pip
        pip install tox
        tox -e unit_tests 

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unit
        file: ./coverage.xml
        verbose: true

  build-test-image:
    name: Build and push test docker image
    runs-on: ubuntu-latest
    needs: [static-code-analysis, unit-tests]
    env:
      DOCKER_TEST_TAG: test-${{ github.run_id }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Container Registry
      uses: docker/login-action@v1 
      with:
        registry: docker.io
        username: valeger
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push images to repository with test tags
      uses: docker/build-push-action@v2
      with:
        file: docker/runner.Dockerfile
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: docker.io/${{ github.repository }}:${{ env.DOCKER_TEST_TAG }}

  integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: build-test-image
    strategy:
      matrix:
        python-version: [3.8, 3.9] 
    steps:
    - uses: actions/checkout@v3

    - name: Setup Minikube
      run: | 
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube
        minikube start
        minikube addons enable ingress

    - name: Setup Python 
      uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}

    - name: Run integration tests
      env:
        DOCKER_TEST_TAG: test-${{ github.run_id }}
        GITHUB_ACCESS_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}
      run: |
        python -m pip install --upgrade pip
        pip install tox
        tox -e integration_tests

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: integration
        file: ./coverage.xml
        verbose: true
  
  check-version:
    name: Ensure package version matches the pushed tag before build and release.
    needs: integration-tests
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Get version
      shell: bash
      run: |
        export CURRENT_VERSION=$(cat automl/version.py | cut -d $'=' -f 2 | cut -d $'"' -f 2)
        if [[ ${GITHUB_REF_NAME#*v} != $CURRENT_VERSION ]] ; then
          echo "Current version in the version.py file is v${CURRENT_VERSION} and is not the same as the pushed tag. Please bump version in version.py file."
          exit 1
        else
          echo "Current package version matches the pushed tag."
        fi

  build:
    name: Build images
    needs: check-version
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: docker/runner.Dockerfile
            repo: docker.io/${{ github.repository }}
          - dockerfile: .docker/Dockerfile
            repo: docker.io/${{ github.repository }}-client
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Container Registry
      uses: docker/login-action@v1 
      with:
        registry: docker.io
        username: valeger
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Create docker tag env
      run: |
        echo "DOCKER_TAG=${GITHUB_REF_NAME#*v}" >> $GITHUB_ENV

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ matrix.repo }}:${{ env.DOCKER_TAG }}
        
  publish-and-release:
    name: Publish the package to PyPI repository and create release
    runs-on: ubuntu-latest
    needs: check-version
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Build a binary wheel and a source tarball
      run: |
        pip install wheel
        python setup.py sdist bdist_wheel
    - name: Publish the package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Create release tag
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}